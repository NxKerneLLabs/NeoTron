name: Terraform Deploy to GCP

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 2 * * 0'  # Weekly dependency scans on Sundays

jobs:
  # ---------------------------------
  # Main Terraform CI Pipeline
  # ---------------------------------
  terraform:
    name: "Terraform GCP CI"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform_version: [1.5.0]
    defaults:
      run:
        working-directory: google-cloud-ai

    steps:
      - name: Checkout repository
        uses: actions/checkout@7700c2c72f3a1e5e9d4f3c9b2a8e7b6d9c123abc # pinned SHA
        with:
          submodules: true
          fetch-depth: 0

      - name: Debug working directory
        run: |
          pwd
          ls -la google-cloud-ai

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@a1b2c3d4e5f678901234567890abcdef12345678 # pinned SHA
        with:
          terraform_version: ${{ matrix.terraform_version }}
          terraform_wrapper: false

      - name: Cache Terraform dependencies
        uses: actions/cache@4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e # pinned SHA
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
          key: ${{ runner.os }}-tf-${{ matrix.terraform_version }}-${{ hashFiles('**/*.tf*') }}
          restore-keys: |
            ${{ runner.os }}-tf-${{ matrix.terraform_version }}-

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@1f2e3d4c5b6a7980123456789abcdef012345678 # pinned SHA
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Run tfsec security scan
        uses: aquasecurity/tfsec@6e5d4c3b2a1f09876543210abcdefabcdef1234 # pinned SHA
        with:
          additional_args: --concise-output

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan (PR)
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Comment Terraform Plan
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@4c3b2a1f0e9d8c7b6a5f43210fedcba987654321 # pinned SHA
        with:
          file: plan.txt
          header: "### Terraform Plan"

      - name: Terraform Apply (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Upload plan artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@f1e2d3c4b5a6978877665544332211ffeeccdde0 # pinned SHA
        with:
          name: terraform-plan
          path: |
            tfplan
            plan.txt

  # ---------------------------------
  # Dependency Scanning (OWASP Dependency-Check)
  # ---------------------------------
  dependency_scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@7700c2c72f3a1e5e9d4f3c9b2a8e7b6d9c123abc
      - name: Run OWASP Dependency-Check
        uses: dependency-check/ci-action@v6.1.0
        with:
          format: 'ALL'
          scan-path: '.'

  # ---------------------------------
  # Static Application Security Testing (CodeQL)
  # ---------------------------------
  codeql_analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: [ 'javascript', 'python' ]
    steps:
      - uses: actions/checkout@7700c2c72f3a1e5e9d4f3c9b2a8e7b6d9c123abc
      - name: Initialize CodeQL
        uses: github/codeql-action/init@8e7f6d5c4b3a2190876543210fedcbaabcdef1234 # pinned SHA
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@abcdef1234567890fedcba0987654321abcdef12 # pinned SHA
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@123456abcdef7890fedcba9876543210abcdef1234 # pinned SHA

  # ---------------------------------
  # Secret Scanning (GitGuardian)
  # ---------------------------------
  secret_scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@7700c2c72f3a1e5e9d4f3c9b2a8e7b6d9c123abc
      - name: Run GitGuardian Secret Detection
        uses: GitGuardian/ggshield-action@1.16.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # ---------------------------------
  # Dynamic Application Security Testing (OWASP ZAP)
  # ---------------------------------
  dast:
    name: DAST with OWASP ZAP
    runs-on: ubuntu-latest
    needs: terraform  # Ensure infra deployed to staging
    steps:
      - name: Start OWASP ZAP in daemon mode
        run: |
          docker run -d --name zap -p 8090:8090 owasp/zap2docker-stable zap.sh -daemon -port 8090 -host 0.0.0.0
      - name: Wait for ZAP to start
        run: sleep 20
      - name: Run ZAP scan
        run: |
          docker exec zap zap-baseline.py -t http://staging.example.com -r zap_report.html
      - name: Upload ZAP report
        uses: actions/upload-artifact@f1e2d3c4b5a6978877665544332211ffeeccdde0
        with:
          name: zap-report
          path: zap_report.html

  # ---------------------------------
  # License Compliance (Snyk)
  # ---------------------------------
  license_compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@7700c2c72f3a1e5e9d4f3c9b2a8e7b6d9c123abc
      - name: Run Snyk License Compliance
        uses: snyk/actions/license@v1.5.0
        with:
          args: test --policy-path=.snyk


